theory Minimal_Loop_Example begin



/*
  Author: Simon Meier <simon.meier@inf.ethz.ch>
  Date:   2012 06 10
  Status: Working

  A minimal example that is looping and satisfies a property cannot be proven
  without inductive strengthening.

*/
builtins: multiset

rule Start: [ Fr(x), Fr(D) ] --[ Start(x,D) ]-> [ A( x,D), B(x,D) ]

rule Loop:  [ A( x,D) ]  --[ Loop(x, D)  ]-> [ A( x,D+'1') ]

rule Loop2:  [ B( x,D) ]  --[ Loop2(x, D)  ]-> [ B( x,D) ]

rule Stop:  [ A( x,D) ]  --[ Stop(x, D)  ]-> [ ]
rule Stop2:  [ B( x,D) ]  --[ Stop2(x, D)  ]-> [ ]

lemma Start_before_Loop [reuse, use_induction]:
  "All x D #j. Loop(x,D ) @ j ==> (Ex D2 #i. Start(x,D2) @ i & i < j)"

lemma Start_before_Loop2 [reuse, use_induction]:
  "All x D #j. Loop2(x,D ) @ j ==> (Ex D2 #i. Start(x,D2) @ i & i < j)"

//lemma Start_before_Stop:
//  "All x #j. Stop(x) @ j ==> (Ex #i. Start(x) @ i & i < j)"

lemma Loop_before_Stop [reuse, use_induction]:
  "All x D1 D2 #i #j. Stop(x, D1) @ j & Loop(x, D2) @ i ==> #i < #j"

//lemma Stop_unique [reuse]:
//  "All x #i #j. Stop(x) @ j & Stop(x) @ i ==> #i = #j"
//
//lemma Satisfied_by_empty_trace_only [use_induction]:
//  exists-trace
//  "All x #j. Loop(x) @ j ==> F"

end
