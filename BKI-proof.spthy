/* Provide hints for Tamarin's heuristics.  In this case, we tell
   Tamarin to delay (make "Last", "L_") finding the sources for the
   LogDevice fact, since it doesn't provide useful information and can
   lead to non-termination. It is similar for LogCloud, but the trace
   is found faster if we don't use L_ for that. */

/* In this proof, we use several abstractions. For example, we treat
   our log structure as a list to record simplified data item. */


theory BKI_protocol_correctness

/* Author: Zhiguo Wan*/

/*
    =======Entity=======


    - Certificate authorities (CA) check the identity of domain
      owners, and create certificates for the domain owners'
      keys. However, in contrast with today's CAs, the ability of CAs
      in DTKI is limited since the issuance of a certificate from a CA
      is not enough to convince web browsers to accept the certificate
      (proof of presence in the relevant CLM is also needed).


    =======Adversary model=======

    We consider an adversary who can compromise the private key of all
    infrastructure servers in DTKI. In other words, the adversary can
    collude with all log servers and certificate authorities to launch
    attacks. In addition, we assume that each domain server can
    securely setup a master key with the corresponding CLM, and will
    be able to keep the master key private.

    =======Protocol=======


    =======Notes=======

    Rule name: All capital, with '_' to separate words, e.g. RULE_NAME

    Actions: First letter is capital, with '_' to separate words,
    e.g. Action_Name

    State facts: Eg, 'StSecureCommA1' start with 'St', ends in role name
    and step in role that outputs it. By convention, the first argument
    is the thread identifier (tid), freshly generated in the first step
    of the role.

    Conclusion: First letter is capital, without '_',
    e.g. ConclusionName

    Lemma and restriction: lower case letter only, with '_' to separate
    words, e.g.lemma_name

*/

//theory BKI
begin

builtins: multiset

functions: adec/2, aenc/2, fst/1, h/1, pair/2, pk/1, sdec/2, senc/2,
  sign/2, snd/1, false/0, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true


restriction Unique: "All x #i #j. Uniq(x) @ i & Uniq(x) @ j ==> #i = #j"
// Instead of using the restriction for "x < y" directly,
// restriction Less:   "All x y #i. Less(x,y) @ i ==> Ex z. x + z = y"
// we use two restrictions for "x <> y" and "not (y < x)"
restriction Less1:   "not (Ex x #i. Less(x,x) @ i)"
restriction Less2:   "not (Ex x y #i. Less(x+y,x) @ i)"
restriction InEq:   "not (Ex x #i. InEq(x,x) @ i)"


/* Initialize the whole system */
rule INIT_SYSTEM_PARAMS:
   let 
        n = '1' 
        k = '1'
        t = '1'
	Init = <'INITSYS', $n, k, t>	//Init is feeded by adversary
   in
    [ In(Init) ]
    --[ SubsetEq(k, n),
        SubsetEq(t, k),
//        InEq(n, '1'),
	Only_One('INITSYS')]->
    [!PubParams(n, k, t)]

/*Initialisation: Certificate log maintainer CLM1. */

rule INIT_BLM:
    [ Fr(~ltkB)
      ]		// Assume rgxC is fresh and associated with C. --Zhiguo
  --[ Is_Type('BLM', $B),
      Only_One('INITBLM') // 
    ]->
    [ !Ltk($B, ~ltkB),
      !Pk($B, pk(~ltkB)),
      StStateInitBLM($B, pk(~ltkB)),
      Out(pk(~ltkB))
    ]



/*Initialisation: Certificate log. */

rule INIT_BLOG:
     [
      !Ltk($B, ltkB),
      StStateInitBLM($B, pk(ltkB)),
      Fr(~blogid)
     ]
   --[ Is_Type('BLM', $B),
       Only_One('BLOG') // Each log maintainer has only one log.
     ]->
     [
      //!CLM_RGX($C, pk(ltkC), rgxC),		// Persistent fact that C is associated with rgxC, 
						// Do not consume StStateInitCLM. --Zhiguo
      L_Blog($B, ~blogid, 'nil') // the log maintained by the
                                          // CLM is for domains whose
                                          // name is an instence of
                                          // regular expression RGX1
     ]


  /* Initialisation: Certificate authorities*/

  rule INIT_CA:
  let q = < 'Init_CA', i, $CA>
  in
  [  In(q),
     Fr(~ltkCA),
     !PubParams(n, k, t)]
  --[
     Is_Type('CA', $CA),
     Uniq(<'CA', i>),		// i is the identity of CA
     Uniq(<'CA', $CA>),		// Multiple CAs needed, each one is init only once
     IsIn(i, n)		// $CA is in form of '1'+...+'1'
     ]->

  [ !Ltk($CA, ~ltkCA),
    !Pk($CA, pk(~ltkCA)),	// bind CA with its public key ltkCA. Zhiguo
    !Pmap( $CA, i),		// A mapping recording CAs' identities
    Out(pk(~ltkCA))
  ]


  /* Compromise a CA */

  rule COMPROMISE_CA:
          [ !Ltk($CA, ltkCA)
          ]
  --[
     Is_Type('CA', $CA),
     Compromise_CA($CA,ltkCA)
     ]->

  [
   Out(ltkCA)
  ]
  

  /* Compromise a BLM */

  rule COMPROMISE_BLM:
          [ !Ltk($B, ltkB)
          ]
  --[
     Is_Type('BLM', $B),
     Compromise_BLM($B,ltkB)
     ]->

  [
   Out(ltkB),
   StCompromisedBLM($B,ltkB)
  ]

/*Initialisation: domain server Did*/

rule INIT_DOMAIN:
     [ Fr(~ltkD)
     ]
  --[ Is_Type('Domain', $D), 
      Uniq(< 'Domain', $D >),
      Uniq(<'INIT_DOMAIN', $D>) ]->	// A domain initialze once --Zhiguo
  [ !Ltk($D, ~ltkD),
    !Pk($D, pk(~ltkD)),
    !DomainInfo($D, pk(~ltkD)),
    LocalRecord($D, 'nil'),
    Sigs_List($D, 'nil', 'nil', 'nil'),	// The first list is sigs_list, the second is CA_list
    Sigs_Check_List($D, 'nil'),		// To store sigs that have been verified. Zhiguo
    //MasterKey($D, pk(~ltkD)),
    Out(pk(~ltkD))
    ]

  /* Request a certificate from CAs */
rule REQUEST_CERT:
          let request= <'RequestCert', $D, ltpkD>
            in
     [
      !DomainInfo($D, ltpkD)
      //MasterKey($D, ltpkD)
     ]
  --[
     Is_Type('Domain', $D)
     //Is_Type('CA', $CA)
     ]->
    [
     Out(request)
    ]


  /* Domain requests signatures from at least k CAs
     This should be offline, or a secure out-of-band channel. Zhiguo
     */
rule CREATE_CERT_PHASE_1:
  let request= <'RequestCert', $D, ltpkD>
      Sig = sign( <'DomainCert', $D, ltpkD>, ltkCA)
      Sig_full = <$D, Sig, i, $CA>
  in
     [
      In(request),
      !Ltk($CA, ltkCA),
      !Pmap($CA, i),
      !Pk($D, ltpkD)
     ]
  --[
     Is_Type('Domain', $D),
     Is_Type('CA', $CA),
     Start_Role(<'CCP','CA'>,<$CA, $D>),
     Uniq(<'ObtainSig', $D, i, $CA>)		// A CA only provides a single signature
     ]->
    [
     Out(Sig_full)     // Obtain a signature from CA--Need k Sigs for a certificate.
    ]
  
  /* Collect sigs from CAs
     */
rule CREATE_CERT_PHASE_2:
   let
       Sig = sign( <'DomainCert', $D, ltpkD>, ltkCA)
       Sig_full = <$D, Sig, i, $CA>
   in

    [
     Sigs_List($D, Sigs, CAs, nSigs),	// Update current Sigs_List, add a new sig into it. Zhiguo
     In(Sig_full),
     !Pk($CA,ltpkCA),			// CA -- ltpkCA -- Sig -- CAs, Sigs---All bind together.
     !Pk($D, ltpkD),			// restriction fact for domain D, otherwise ltpkD may not be equal to pk(ltkD).
     !Pmap($CA, i)
    ]
  --[
     Is_Type('Domain', $D),
     Is_Type('CA', $CA),
     Uniq(<'CheckSig', $D, $CA>),		// A CA only provides a single signature, make it different from PHASE_1
     NotIn($CA, CAs),		// This CA has not provided a signature for the Domain.
     Eq(ltpkCA,pk(ltkCA)),
     Eq(verify(Sig, <'DomainCert', $D, ltpkD>, ltpkCA), true )
    ]->
    [Sigs_List($D, Sigs + Sig_full, CAs + $CA, nSigs + '1')]   // Added into Sigs_List after checking. Zhiguo
					// Sigs include Sig_full because Sig_full include $D and Did information

/* If k sigs have been collected, domain owner submits it to BLMs for logging. 
  */
rule CREATE_CERT_PHASE_3:
    [
    !PubParams(n, k, t),
    Sigs_List($D, Sigs, CAs, nSigs)
    ]
  --[
    Is_Type('Domain', $D),
    //Is_Type('CA', $CA),
    SubsetEq(k, nSigs)		// k = k '1'. If k is in nSigs, then k Sigs are collected by domain owner.
    ]->
    [
    !Sigs_List_Final($D, Sigs, CAs, nSigs)	// This list is consumed at Phase_5 by BLM
    //Out(Sigs)
    ]

/* Received k signatures, and check each signature separately */
rule CREATE_CERT_PHASE_4:
   let 
      Sig = sign( <'DomainCert', $D, ltpkD>, ltkCA)
      Sig_full = <$D, Sig, i, $CA>
   in
    [
    In(Sig),
    //In(Sigs),
    !Sigs_List_Final($D, Sigs, CAs, nSigs),	// This list is consumed at Phase_5 by BLM
    Sigs_Check_List($D, Sigs_Checked),
    !Pmap($CA, i),
    !Pk($CA, ltpkCA),
    !Pk($D, ltpkD)
    ]
  --[
    Is_Type('Domain', $D),
    Is_Type('CA', $CA),
    Uniq(<'CheckSig', $D, $CA>),	// The CA's sig for is checked for only once.
    IsIn(Sig_full, Sigs),	// Received Sigs include a valid signature.
    Eq(verify(Sig, <'DomainCert', $D, ltpkD>, ltpkCA), true )
    ]->
    [
    Sigs_Check_List($D, Sigs_Checked + Sig_full)
    ]

rule CREATE_CERT_PHASE_5:
//    let
//      Proof_BLM = sign( <'AddedByBLM', Sigs>, ltkB)
//    in
    [
    !Sigs_List_Final($D,  Sigs, CAs, nSigs),
    Sigs_Check_List($D, Sigs_Checked)
//    L_Blog($B, blogid, blog),
//    !Ltk($B, ltkB)
    ]
  --[
    Is_Type('BLM', $B),				// otherwise CA is used as B here.
    SubsetEq(Sigs, Sigs_Checked),		// All sigs have been checked.
    Accept($D, Sigs, CAs)
    ]->
    [
//    L_Blog($B, blogid, blog + <$D, Sigs, nSigs>),
//    Out(Proof_BLM),
    Cert_Issued($D, Sigs, CAs)
    ]

//rule CREATE_CERT_FINAL:
//    [Cert_Issued($D, Sigs, CAs)]
//  --[
//     Accept($D, Sigs, CAs)]->
//    [ ]

restriction only_one:
  "(All x #i #j. (Only_One(x)@i & Only_One(x)@j) ==> (#i = #j))"

//restriction only_one2:
//  "(All x y #i #j. (Only_One2(x,y)@i & Only_One2(x,y)@j) ==> (#i = #j))"

restriction only_one4:
  "(All x y z w #i #j. (Only_One3(x,y,z,w)@i & Only_One3(x,y,z,w)@j) ==> (#i = #j))"

restriction only_one_list:	// Enforce a list of form: '1' + '1' + .... + '1'
  "(All x #i. (List_of_Ones(x)@i ) ==> not (Ex y z. (not (y = '1')) & (y+z = x) ))"

restriction bound_domain_rgx:
  "(All x y1 y2 #i #j. (Bind_Domain_RGX(x,y1)@i & Bind_Domain_RGX(x,y2)@j) ==> (#i = #j) & (y1 = y2))"

restriction types_distinct:
  "(All t1 t2 x #i #j. (Is_Type(t1,x)@i & Is_Type(t2,x)@j) ==> (t1 = t2))"

restriction eq_check_succeed:
  "All x y #i. Eq(x,y) @ i ==> x = y"

restriction neq_check_succeed:
  "All x y #i. Neq(x,y) @ i ==> not (x = y)"

restriction notin_check_succeed:
  "All x l #i. NotIn(x,l) @ i ==> not (Ex rest. x+rest = l)"

restriction in_check_succeed:
  "All x l #i. IsIn(x,l) @ i ==> Ex rest. x+rest = l"


restriction subseteq_check_succeed:
  "All l m #i. SubsetEq(l,m) @ i ==> ( ( l = m ) | (Ex rest. l+rest = m) )"

restriction one_role_instance:
  "(All #i #j role param1 param2 .
     (
     Start_Role(role,param1) @ i &
     Start_Role(role,param2) @ j
     )
     ==>
     ( #i = #j )
   )"


 /* We can run protocol correctly without having any compromised party*/

lemma protocol_correctness:
 exists-trace
 " /* It is possible that */
   Ex D Sigs CAs #i1.

   /* The user received a confirmation, i.e. hashed secret the user
   has sent, from the network */

   //Com_Done(D, n, rgx, ltpkD, stpkD) @ #i1
   Accept(D, Sigs, CAs) @ #i1

     /* without the adversary compromising any party. */
   &   not (Ex #i2 CA ltkCA.
                Compromise_CA(CA,ltkCA) @ #i2)

   &   not (Ex #i3 B ltkB.
                Compromise_BLM(B,ltkB) @ #i3)

"
//lemma message_secrecy_no_compromised_party:
// "
// All D m rgx ltpkD stpkD #i1.
//
//   /* If a user received a confirmation, i.e. hashed secret the user
//   has sent, from the network */
//
//   (Com_Done(D, m, rgx, ltpkD, stpkD) @ #i1
//
///* and no party has been compromised */
//   &   not (Ex #i2 CA ltkCA.
//                Compromise_CA(CA,ltkCA) @ #i2)
//
//   &   not (Ex #i3 C ltkC.
//                Compromise_CLM(C,ltkC) @ #i3)
//
//   &   not (Ex #i4 M ltkM.
//                Compromise_MLM(M,ltkM) @ #i4)
//      )
//      ==>
//      ( /* then the adversary cannot know m */
//       not (Ex #i5. K(m) @ #i5)
//      )
// "
//
//lemma message_secrecy_compromise_all_domain_verified_master_cert:
// "
// All D m rgx ltpkD stpkD #i1.
//
//   /* If a user received a confirmation, i.e. hashed secret the user
//   has sent, from the network */
//
//   (Com_Done(D, m, rgx, ltpkD, stpkD) @ #i1
//
///* and at an earlier time, the domain server has verified his master
//certificate */
//
//     & Ex #i2.
//     VerifiedMasterCert(D, rgx, ltpkD) @ #i2 &
//        #i2 < #i1
///* and all parties can be compromised*/
//      )
//      ==>
//      ( /* then the adversary cannot know m */
//       not (Ex #i3. K(m) @ #i3)
//      )
// "
//  /* Sanity check on verification: can finish trace with good log*/
//
//lemma protocol_can_finish_with_good_log:
// exists-trace
// "/* It is possible that */
//   Ex D n rgx ltpkD stpkD #i1 #i2.
//
//   /* The user received a confirmation, i.e. hashed secret the user
//   has sent, from the network */
//
//   Com_Done(D, n, rgx, ltpkD, stpkD) @ #i1
//
//   /* and we check the log afterwards and find no fake records */
//   &  #i1 < #i2
//   &  CheckedLog(D, rgx, 'nil', 'good', 'nil') @ #i2
//
//   /* and the adversary did not compromise any party */
//   &   not (Ex #i3 CA ltkCA.
//                Compromise_CA(CA,ltkCA) @ #i3)
//
//   &   not (Ex #i4 C ltkC.
//                Compromise_CLM(C,ltkC) @ #i4)
//
//   &   not (Ex #i5 M ltkM.
//                Compromise_MLM(M,ltkM) @ #i5)
//
// "
//
//lemma detect_bad_records_in_the_log_when_master_cert_not_verified:
//
// "
// All D m rgx ltpkD flag stpkD #i1 #i2 #i3.
//
//   /* If a user received a confirmation, i.e. hashed secret the user
//   has sent, from the network */
//
//   (Com_Done(D, m, rgx, ltpkD, stpkD) @ #i1
//
///* and all parties can be compromised*/
//
///* and the master certificate of the domain was not initially verified */
//
///* and the adversary knows m */
//
//     &  K(m) @ #i2
//
///* and we afterwards check the log */
//     &  CheckedLog(D, rgx, ltpkD, flag, stpkD) @ #i3
//
//    &   #i1 < #i3)
//      ==>
//      ( /* then we can detect a fake record in the log */
//        (flag = 'bad')
//      )
// "

end
